<project name="Clif" default="help">

	<!-- directory definition -->
	<property name="clif.etc" value="${basedir}/etc" />
	<property name="clif.lib" value="${basedir}/lib" />
	<property name="clif.bin" value="${basedir}/bin" />
	<property file="${clif.etc}/clif.props" />
	<property name="isac.dir" value="${basedir}/isac" />
	<property name="2clif2.dir" value="2clif2-output" />
	<property name="ant.regexp.regexpimpl" value="org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp" />
	<!-- for launch with Hudson plug-in -->
	<property environment="env"/>

	<!-- definitions for SIGAR-based probes -->
	<property name="sigar.dir" value="${clif.lib}/sigar" />

	<!-- ============== -->
	<!--  CLASSPATH     -->
	<!-- ============== -->

	<path id="baseclasspath">
		<pathelement location="${clif.lib}/*" />
		<pathelement location="${clif.lib}/ext/*" />
		<pathelement location="${clif.etc}" />
	</path>

	<path id="paclasspath">
		<path refid="baseclasspath"/>
		<pathelement location="${clif.lib}/ProActive/*" />
	</path>

	<path id="baseclasspathSwing">
		<pathelement location="${clif.lib}/*" />
		<pathelement location="${clif.etc}" />
	</path>	

	<!-- ================================== -->
	<!--            HELP                    -->
	<!-- ================================== -->

	<target name="help" description="displays basic help to run CLIF using ant">
		<echo>
CLIF Swing console GUI help:
1- first call 'config' target to configure
2- run a single console GUI to run and manage tests using the distributed set of CLIF servers (see 'console' target).
3- run a single CLIF server on every host you wish to use as a load injector and/or as resource consumption probe (see 'server' or 'seed' target).
4- once all CLIF servers are ready, refresh the server list in the console GUI. CLIF is ready.

Command-line interface help: refer to CLIF's user manual for mandatory arguments of the following commands:
- 'registry' runs a Registry and a default CLIF server named "local host" on one of your nodes. This command does not return.
- 'config' configure Clif servers accordingly to the node where the Registry is running (to be performed on each server).
- 'server' runs a CLIF server to host load injectors and probes. When ready, the server registers in the registry and prints a message. This command does not return.
- 'listservers' gets the list of registered CLIF servers from the registry and prints it on standard output.
- 'waitservers' blocks until all CLIF servers involved in a given test plan are registered in the registry.
- 'deploy' target to deploy a test plan (the test plan may be edited with the console GUI). This command does not return.
- 'init' target to initialize the test run, or alternatively use 'run' to initialize and start the test run, wait for its termination and collect results.
- 'start' target to start the initialized test run.
- 'suspend', 'resume' targets to respectively suspend, resume a running test.
- 'join' target to wait for test run termination, or 'stop' target to force the test run to stop before natural completion.
- 'collect' to locally collect all results generated by the test run (first waits for test termination).
			
Analysis tool: use 'analyze' target to run a basic analyzer tool

ISAC scenario help: ISAC scenarios may be edited using CLIF's Eclipse console or CLIF and ISAC plug-ins for Eclipse
- call 'isac-plugins' target to compile ISAC plugins
- call 'isac-clean' target to delete output of ISAC plugins compilation

		</echo>
	</target>

	<!-- ================================== -->
	<!--           CONFIGURATION            -->
	<!-- ================================== -->

	<target name="ask-registry-host" unless="registry.host" >
		<input message="please enter the registry host: " addproperty="registry.host" />
	</target>
	<target name="set-registry-port" unless="registry.port" >
		<property name="registry.port" value="1234" />
	</target>
	<target name="set-codeserver-host" unless="codeserver.host" >
		<property name="codeserver.host" value="${registry.host}" />
	</target>
	<target name="set-codeserver-port" unless="codeserver.port" >
		<property name="codeserver.port" value="1357" />
	</target>
	<target name="set-codeserver-path" if="codeserver.path" >
		<replaceregexp
			byline="true"
			match="-Dclif\.codeserver\.path[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Dclif.codeserver.path=&quot;${codeserver.path}&quot;"
			file="${clif.etc}/clif.props" />
	</target>
	<target name="network-select" unless="network.address" >
		<java
			classname="org.ow2.clif.util.Network"
			classpathref="baseclasspath"
			fork="yes"
			failonerror="no"
			output="${clif.etc}/networkaddress.props"
			logerror="yes">
			<arg line="${registry.host} 5" />
		</java>
	</target>
	<target name="network-select-by-ping" unless="network.address" >
		<exec 
			executable="${clif.bin}/netfind.sh"
			osfamily="unix"
			dir="${clif.etc}"
			output="${clif.etc}/networkaddress.props"
			logerror="yes">
			<arg line="${registry.host} 5" />
		</exec>
	</target>
	<target name="network-select-check" unless="network.address" >
		<fail message="Configuration failed: could not reach ${registry.host}"/>
	</target>
	<target name="config" description="configuration helper" depends="ask-registry-host,set-registry-port,set-codeserver-host,set-codeserver-port,set-codeserver-path" >
		<antcall target="network-select"/>
		<property file="${clif.etc}/networkaddress.props" />
		<antcall target="network-select-by-ping" />
		<property file="${clif.etc}/networkaddress.props" />
		<antcall target="network-select-check" />
		<replaceregexp
			byline="true"
			match="-Djonathan\.connectionfactory\.host[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Djonathan.connectionfactory.host=${network.address}"
			file="${clif.etc}/clif.props" />
		<replaceregexp
			byline="true"
			match="-Dclif\.filestorage\.host[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Dclif.filestorage.host=${network.address}"
			file="${clif.etc}/clif.props" />
		<replaceregexp
			byline="true"
			match="-Dfractal\.registry\.host[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Dfractal.registry.host=${registry.host}"
			file="${clif.etc}/clif.props" />
		<replaceregexp
			byline="true"
			match="-Dfractal\.registry\.port[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Dfractal.registry.port=${registry.port}"
			file="${clif.etc}/clif.props" />
		<replaceregexp
			byline="true"
			match="-Dclif\.codeserver\.host[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Dclif.codeserver.host=${codeserver.host}"
			file="${clif.etc}/clif.props" />
		<replaceregexp
			byline="true"
			match="-Dclif\.codeserver\.port[ \t]*=[ \t]*[^ \t\\]+"
			replace="-Dclif.codeserver.port=${codeserver.port}"
			file="${clif.etc}/clif.props" />
		
		<echo message="${clif.etc}/clif.props has been generated." />
	</target>

	<!-- ======================================== -->
	<!-- TRANSLATION FROM CLIFv1.3.x to CLIFv2.0  -->
	<!-- ======================================== -->
	
	<target name="2clif2" description="ports files in current directory from CLIF v1 to CLIF v2: .xis .ctp .java .xml .classname">
		<mkdir dir="${user.dir}/${2clif2.dir}" />
		<copy overwrite="yes" todir="${user.dir}/${2clif2.dir}" failonerror="yes" preservelastmodified="yes">
			<fileset dir="${user.dir}" excludes="${2clif2.dir}" />
		</copy>
		<move todir="${user.dir}/${2clif2.dir}" failonerror="yes" preservelastmodified="yes">
			<fileset dir="${user.dir}/${2clif2.dir}" />
			<mapper type="regexp" from="^(.*)plugin\.properties$$" to="\1isac-plugin.properties"/>
		</move>
		<!-- Java files (e.g. for ISAC plug-ins), Fractal ADL files, test plan files, report events classname files, BIRT reports -->
		<replaceregexp
				flags="g"
				match="org.objectweb.clif"
				replace="org.ow2.clif" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.ctp **/*.java **/*.classname **/*.rptdesign **/*.fractal" followsymlinks="no" />
		</replaceregexp>

		<!-- XML files (e.g. ISAC plug-ins descriptors), including ISAC scenario files -->
		<replaceregexp
				match="PUBLIC &quot;-//.+//EN&quot;"
				replace="SYSTEM" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.xis **/*.xml" followsymlinks="no" />
		</replaceregexp>
		<replaceregexp
				flags="g"
				match="org/objectweb/clif"
				replace="org/ow2/clif" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.xis **/*.xml **/*.fractal" followsymlinks="no" />
		</replaceregexp>
		<replaceregexp
				flags="g"
				match="name=&quot;HttpInjector_1.0&quot;"
				replace="name=&quot;HttpInjector&quot;" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.xis **/*.xml" followsymlinks="no" />
		</replaceregexp>
		<replaceregexp
				flags="g"
				match="name=&quot;Jdbc_1.0&quot;"
				replace="name=&quot;JdbcInjector&quot;" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.xis **/*.xml" followsymlinks="no" />
		</replaceregexp>
		<replaceregexp
				flags="g"
				match="name=&quot;SipInjector_1.0&quot;"
				replace="name=&quot;SipInjector&quot;" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.xis **/*.xml" followsymlinks="no" />
		</replaceregexp>
		<replaceregexp
				flags="g"
				match="name=&quot;HttpMatrix_1.0&quot;"
				replace="name=&quot;HttpMatrix&quot;" >
			<fileset dir="${user.dir}/${2clif2.dir}" includes="**/*.xis **/*.xml" followsymlinks="no" />
		</replaceregexp>
	</target>

	<!-- ================================== -->
	<!--               RUN SERVER           -->
	<!-- ================================== -->

	<target name="checkOsfamily">
		<condition property="clif.os.name" value="windows">
			<os family="windows" />
		</condition>
		<condition property="clif.os.name" value="${os.name}" >
			<and>
				<os family="unix" />
				<not>
					<os family="mac"/>
				</not>
			</and>
		</condition>
		<condition property="clif.os.name" value="macosx">
		<!-- Mac OS X is both mac and unix -->
			<and>
				<os family="mac"/>
				<os family="unix"/>
			</and>
		</condition>
	</target>

	<target name="server-with-arg" if="node.name" >
		<java
			classname="org.ow2.clif.server.lib.ClifServerImpl"
			classpathref="paclasspath"
			fork="yes"
			failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${server.name}" />
			<arg value="${node.name}" />
		</java>
	</target>

	<target name="server-default" unless="node.name">
		<java
			classname="org.ow2.clif.server.lib.ClifServerImpl"
			classpathref="paclasspath"
			fork="yes"
			failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${server.name}" />
		</java>
	</target>

	<target
		name="server"
		depends="checkOsfamily,server-with-arg,server-default"
		description="runs a PA CLIF server where blades can be deployed"/>

	<!-- ================================== -->
	<!--            RUN CONSOLE             -->
	<!-- ================================== -->

	<target name="console" description="runs a CLIF graphical console to manage load tests" depends="checkOsfamily">
		<java
			classname="org.ow2.clif.console.lib.gui.GuiConsoleImpl"
			classpathref="baseclasspath"
			fork="yes"
			failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
		</java>
	</target>

	<!-- ================================== -->
	<!--            RUN ANALYZER            -->
	<!-- ================================== -->
		
	<target name="analyze" description="Runs an analyzer">
		<condition property="analyzer" value="graph">
			<not>
				<isset property="analyzer" />
			</not>
		</condition>
		<condition property="test" value="-">
			<not>
				<isset property="test" />
			</not>
		</condition>
		<condition property="class" value="">
			<not>
				<isset property="class" />
			</not>
		</condition>
		<java
			classname="org.ow2.clif.analyze.lib.${analyzer}.AnalyzerImpl"
			classpathref="baseclasspath"
			fork="yes"
			failonerror="yes">
			<arg value="${test}" />
			<arg value="${class}" />
			<jvmarg line="${clif.parameters}"/>
		</java>
	</target>

	<!-- ================================== -->
	<!--          GETS CLIF VERSION         -->
	<!-- ================================== -->

	<target name="version" description="prints CLIF version" >
		<echo message="JRE ${java.version} from ${java.vendor}" />
		<echo message="JVM ${java.vm.name} version ${java.vm.version} from ${java.vm.vendor}" />
		<echo message="OS ${os.name} version ${os.version} on ${os.arch}" />
		<java
			classname="org.ow2.clif.util.Version"
			classpathref="baseclasspath"
		/>
	</target>
	
	<!-- ================================== -->
	<!--  REGISTRY  -->
	<!-- ================================== -->

	<target name="registry" description="Create registry" >
		<java
			classname="org.ow2.clif.console.lib.batch.RegistryCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters} ${clif.dynamic}" />
		</java>
	</target>

	<!-- ================================== -->
	<!--  WAITSERVERS  -->
	<!-- ================================== -->

	<target name="waitservers" description="Wait for all required CLIF servers to be ready">
		<java
			classname="org.ow2.clif.console.lib.batch.WaitServersCmd"
			classpathref="baseclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg path="${testplan.file}"/>
		</java>
	</target>

	<!-- ================================== -->
	<!--  LISTSERVERS  -->
	<!-- ================================== -->

	<target name="listservers" description="List all registered CLIF servers">
		<java
			classname="org.ow2.clif.console.lib.batch.ListServersCmd"
			classpathref="baseclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
		</java>
	</target>

	<!-- ================================== -->
	<!--  DEPLOY  -->
	<!-- ================================== -->

	<target name="deploy" description="Deploy a test with enhanced pa classpath">
		<java
			classname="org.ow2.clif.console.lib.batch.DeployCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.dynamic} ${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg path="${testplan.file}"/>
		</java>
	</target>

        <target name="deployng" description="Deploy the servers required for the test and deploy a test">
		<java classname="org.ow2.clif.console.lib.batch.DeployCmdNG" classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.dynamic} ${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg path="${testplan.file}"/>
			<arg value="${rm.url}"/>
			<arg value="${rm.cred}"/>
		</java>
	</target>

	<!-- ================================== -->
	<!--  LAUNCH  -->
	<!-- ================================== -->

	<target name="launch" description="Deploys and runs a test" depends="checkOsfamily">
		<java
			classname="org.ow2.clif.console.lib.batch.LaunchCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg path="${testplan.file}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>

	<target name="launchng" description="Deploy and runs a test with the PA RM">
                <java classname="org.ow2.clif.console.lib.batch.LaunchCmdNG" classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.dynamic} ${clif.parameters}" />
                        <arg value="${testplan.name}"/>
                        <arg path="${testplan.file}"/>
                        <arg value="${testrun.id}"/>
                        <arg value="${rm.url}"/>
                        <arg value="${rm.cred}"/>
		</java>
        </target>

    <target name="launchngscheduler" description="Deploy and runs a test with the PA Scheduler">
		<java classname="org.ow2.clif.console.lib.batch.LaunchCmdNGScheduler" classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
                        <jvmarg line="${clif.dynamic} ${clif.parameters}" />
                        <arg value="${testplan.name}"/>
				<arg value="${extdir.path}"/>
                        <arg value="${testplan.file}"/>
                        <arg value="${testrun.id}"/>
                        <arg value="${sched.url}"/>
                        <arg value="${sched.cred}"/>
                        <arg value="${fork.props}"/>
						<arg value="${using.dataspaces}"/>
                </java>
    </target>

	<target
		name="launchWithHudson"
		description="Deploy and runs a test from Hudson/Jenkins CI"
		depends="launchWithHudson-nooption,launchWithHudson-options"
	/>
	
	<target
		name="launchWithHudson-nooption"
		description="Deploy and runs a test from Hudson/Jenkins CI, with no option"
		unless="env.CLIF_OPTS"
		depends="checkOsfamily">
		<java
			classname="org.ow2.clif.console.lib.batch.LaunchCmd"
			classpathref="baseclasspath"
			fork="yes"
			failonerror="yes">

			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters} -Dclif.filestorage.dir='${env.WORKSPACE}/${test.report}' -Dclif.codeserver.path='${env.WORKSPACE}/${testplan.code.path}'" />
			<arg value="${testplan.name}"/>
			<arg path="${env.WORKSPACE}/${testplan.file}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>

	<target
		name="launchWithHudson-options"
		description="Deploy and runs a test from Hudson/Jenkins CI, with options"
		if="env.CLIF_OPTS"
		depends="checkOsfamily">

		<java
			classname="org.ow2.clif.console.lib.batch.LaunchCmd"
			classpathref="baseclasspath"
			fork="yes"
			failonerror="yes">

			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters} ${env.CLIF_OPTS} -Dclif.filestorage.dir='${env.WORKSPACE}/${test.report}' -Dclif.codeserver.path='${env.WORKSPACE}/${testplan.code.path}'" />
			<arg value="${testplan.name}"/>
			<arg path="${env.WORKSPACE}/${testplan.file}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>
	<target name="launchWithHudsonAndScheduler" description="Deploy and runs a test" depends="checkOsfamily">	    
		<java 
		    classpathref="paclasspath"
			classname="org.ow2.clif.pasc.Main"
			failonerror="yes"
            fork="true"	>
			<sysproperty key="proactive.configuration" path="${clif.etc}/ProActiveConfiguration.xml"/>
			<sysproperty key="java.security.policy" path="${clif.etc}/proactive.java.policy"/>
		    <syspropertyset>			
		        <propertyref regex=".*"/>
		    </syspropertyset>
			<permissions>
				<grant class="java.security.AllPermission"/>
			</permissions>
		</java>
	</target>

	<target name="deployWithVamp" description="Deploys PACLIF nodes necessary for a given test plan" depends="checkOsfamily">
		<java
			classname="org.ow2.clif.console.lib.batch.VampLaunchCmd"
			classpathref="baseclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${vamp.uri}"/>
			<arg value="${testplan.name}"/>
			<arg path="${env.WORKSPACE}/${testplan.file}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>

	<target name="launchWithVampAndScheduler"
		description="Deploys ProActive CLIF nodes and then runs a test using the ProActive Scheduler"
		depends="deployWithVamp,launchWithHudsonAndScheduler"/>

	<!-- ================================== -->
	<!--  INIT  -->
	<!-- ================================== -->
	
	<target name="init-blades" description="Initialize a deployed test" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.InitCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${testrun.id}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="init-default" description="Initialize a deployed test" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.InitCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>

	<target
			name="init"
			depends="init-blades,init-default"
			description="Initialize a test"/>

	<!-- ================================== -->
	<!--  START  -->
	<!-- ================================== -->

	<target name="start-blades" description="Start a initialized test" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.StartCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="start-default" description="Start a initialized test" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.StartCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
		</java>
	</target>
	
	<target
			name="start"
			depends="start-blades,start-default"
			description="Start a initialized test"/>

	<!-- ================================== -->
	<!--  STOP  -->
	<!-- ================================== -->

	<target name="stop-blades" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.StopCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="stop-default" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.StopCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
		</java>
	</target>
	
	<target
			name="stop"
			depends="stop-blades,stop-default"
			description="Stop a running test"/>

	<!-- ================================== -->
	<!--  SUSPEND  -->
	<!-- ================================== -->

	<target name="suspend-blades" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.SuspendCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="suspend-default" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.SuspendCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
		</java>
	</target>
	
	<target
			name="suspend"
			depends="suspend-blades,suspend-default"
			description="Suspend a running test"/>

	<!-- ================================== -->
	<!--  RESUME  -->
	<!-- ================================== -->

	<target name="resume-blades" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.ResumeCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="resume-default" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.ResumeCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
		</java>
	</target>
	
	<target
			name="resume"
			depends="resume-blades,resume-default"
			description="Resume a suspended test"/>

	<!-- ================================== -->
	<!--  JOIN  -->
	<!-- ================================== -->

	<target name="join-blades" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.JoinCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="join-default" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.JoinCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
		</java>
	</target>
	
	<target
			name="join"
			depends="join-blades,join-default"
			description="Wait the end of a blade execution"/>

	<!-- ================================== -->
	<!--  RUN  -->
	<!-- ================================== -->

	<target name="run-blades" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.RunCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${testrun.id}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="run-default" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.RunCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>
	
	<target
			name="run"
			depends="run-blades,run-default"
			description="Run a test"/>

	<target name="runWithHudson" description="Runs an already deployed test from Hudson/Jenkins CI" depends="checkOsfamily">
		<java
			classname="org.ow2.clif.console.lib.batch.RunCmd"
			classpathref="baseclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters} -Dclif.filestorage.dir='${env.WORKSPACE}/${test.report}'" />
			<arg value="${testplan.name}"/>
			<arg value="${testrun.id}"/>
		</java>
	</target>

	<!-- ================================== -->
	<!--  COLLECT  -->
	<!-- ================================== -->

	<target name="collect-blades" if="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.CollectCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blades.id}" />
		</java>
	</target>
	
	<target name="collect-default" unless="blades.id">
		<java
			classname="org.ow2.clif.console.lib.batch.CollectCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
		</java>
	</target>
	
	<target
			name="collect"
			depends="collect-blades,collect-default"
			description="Collect the results of a completed test"/>

	<target name="quickstats-default" unless="report.dir">
		<java
			classname="org.ow2.clif.console.lib.batch.QuickstatsCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<jvmarg line="${clif.parameters}" />
		</java>
	</target>

	<target name="quickstats-reportdir" if="report.dir">
		<java
			classname="org.ow2.clif.console.lib.batch.QuickstatsCmd"
			classpathref="baseclasspath" fork="yes" failonerror="yes">
			<jvmarg line="${clif.parameters}" />
			<arg value="${report.dir}" />
		</java>
	</target>

	<target
		name="quickstats"
		description="Generates a simple statistical report for load injectors"
		depends="quickstats-reportdir,quickstats-default" />

	<target name="params" description="Get the currents parameters of a blade">
		<java
			classname="org.ow2.clif.console.lib.batch.CurrentParametersCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blade.id}" />
		</java>
	</target>
	
	<target name="change" description="Change parameter of a blade">
		<java
			classname="org.ow2.clif.console.lib.batch.ChangeParameterCmd"
			classpathref="paclasspath" fork="yes" failonerror="yes">
			<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
			<jvmarg line="${clif.parameters}" />
			<arg value="${testplan.name}"/>
			<arg value="${blade.id}" />
			<arg value="${param.name}" />
			<arg value="${param.value}" />
		</java>
	</target>

	<target name="probehelp" description="Get help for a given type of probe">
		<java
			classname="org.ow2.clif.console.lib.batch.ProbeHelpCmd"
				classpathref="baseclasspath" fork="yes" failonerror="yes">
				<sysproperty key="java.library.path" path="${sigar.dir}${path.separator}${clif.lib}/ext"/>
				<jvmarg line="${clif.parameters}" />
				<arg value="${probe.type}"/>
		</java>
	</target>

	<target name="updateIsac" description="update manifest.mf file to be able to use all isac-plugins added in lib/ext">
		<mkdir dir="${clif.dist.out}" />
		
		<unzip dest="${clif.plugin.console.lib}/ext">
			<fileset dir="${clif.dist.out}">
				<include name="*Injector*.zip"/>
			</fileset>
		</unzip>		
		
		<mkdir dir="${clif.dist.build}/${plugin.console.name}/META-INF/" />
		
		<java
			classname="org.ow2.clif.console.lib.batch.AddIsacPluginCmd"
			classpathref="paclassPath"
			fork="yes"
			failonerror="yes">
			<arg value="${clif.dist.build}/${plugin.console.name}/lib/ext" />
			<arg value="${clif.dist.build}/${plugin.console.name}/templates/MANIFEST.MF.TEMPLATE" />
			<arg value="${clif.dist.build}/${plugin.console.name}/META-INF/MANIFEST.MF" />
		</java>				
		
	</target>
</project>
